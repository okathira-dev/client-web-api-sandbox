---
description: クロマティックボタンアコーディオンの実装について
globs: src/button-accordion-with-keyboard/**/*
---
# button-accordion-with-keyboard

クロマティックボタンアコーディオンを演奏できるウェブアプリケーションのルール集

## プロジェクト概要

このプロジェクトは、ウェブブラウザ上でクロマティックボタンアコーディオンを演奏できるアプリケーションです。
コンピュータキーボードを使用して、アコーディオンの右手側（メロディー）と左手側（伴奏）を演奏できます。

## 技術スタック

- React: UIフレームワーク
- Jotai: 状態管理
- Tone.js: オーディオ処理
- TypeScript: 型システム
- MUI: UIコンポーネントライブラリ

## アプリケーション構造

### ディレクトリ構造

`src/button-accordion-with-keyboard` の構造は大まかに以下のようになっている。

- `/features`: 機能ディレクトリ
  - `/RightHandAccordion`: 右手側の機能
    - `/VolumeControl`: 音量制御
    - `/PitchControl`: ピッチ制御
    - `/ReedSwitch`: リード制御
    - `/RegisterSwitch`: レジスタースイッチ
    - `/Keyboard`: キーボード
  - `/LeftHandAccordion`: 左手側の機能
- `/components`: 汎用的・共通のuiコンポーネント
  - `/KeyboardButton`: キーボードのボタン
- `/atoms`: アコーディオン全体で共有すべき状態管理
- `/consts`: アコーディオン全体に関わるドメイン知識的な定数
- `/audio`: 音声に関わる普遍的な処理
- `/utils`: 機能に依存しない普遍的なユーティリティ関数

## コンポーネント設計ルール

1. コロケーション原則
   - 各機能は1つのディレクトリにまとめる。
   - featuresの子コンポーネントは親コンポーネントのディレクトリ内に配置する。
   - atoms, consts, hooks, utilsは必要に応じてコンポーネントのディレクトリ内に配置する。
     - これらは規模に応じてディレクトリでもファイルでも良い。

2. ファイル構造
   各機能ディレクトリには、必要に応じて以下のファイル・ディレクトリを配置する。

   - `index.tsx`
     - コンポーネントの実装
     - メインコンポーネントのエクスポート
     - 子コンポーネントの統合
     - UIロジック（ドメイン知識が関わらない処理）

   - `/atom`, `atom.ts`
     - Jotaiを使用した状態管理
     - アトムとその初期値の定義
     - 派生アトムやアトムファミリーの定義

   - `/consts`, `consts.ts`
     - アコーディオンのドメイン知識的な定数の定義
     - コンポーネントで使用する定数の定義

   - `/audio`, `audio.ts`
     - Tone.jsを使用した音声処理
     - シンセサイザーの設定
     - エフェクトの適用
     - 音声パラメータの制御

   - `/utils`, `utils.ts`
     - 機能に関連するユーティリティ関数
     - ドメインロジック（ドメイン知識が関わる処理）
     - ドメインにもUIにも関わらないような普遍的なものは、機能ディレクトリでなく `button-accordion-with-keyboard` ディレクトリ直下の `/utils`ディレクトリに配置する。（たとえそこでしか使わないとしても）

   - `/hooks`, `hooks.ts`
     - カスタムフックの実装
     - 状態の購読と更新
     - 副作用の管理

   子コンポーネントの配置：
   - 親コンポーネントに密接に関連する子コンポーネントは適宜ディレクトリを作り配置する
   ```
   /PitchControl
     index.tsx
     /BasePitchControl
       index.tsx
     /RelativePitchControl
       index.tsx
   ```

## 状態管理ルール

1. アトムの分類と配置
   - 関心に合わせてディレクトリに配置する。
   - jotaiのimportはアトムのファイルでのみ行う。
   - そのため、atomそのものはexportしない。

2. オーディオ状態の管理
   - リードセットの状態（有効/無効）
   - ピッチ設定（全体およびリードセット個別）
   - 音量設定（右手/左手個別）
   - レジスタースイッチの状態

## オーディオ処理ルール

1. Tone.jsの利用
   - シンセサイザーの初期化は`AudioInitializer`コンポーネントで行う
   - オーディオ処理は`audio`ディレクトリ内で管理
   - Tone.jsの機能を優先的に使用する

2. オーディオ処理の最適化
   - Tone.jsの提供する機能を最大限活用
   - 複雑な音声処理が必要な場合のみ、Web Audio APIを直接使用
   - 音声処理のパフォーマンスを考慮し、不要な処理を避ける

3. リードセットの音声処理
   - 各リードセットは独立して制御可能
   - デチューン処理はTone.jsのネイティブ機能を使用
   - ピッチ変更はリアルタイムで反映
