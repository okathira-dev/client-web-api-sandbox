---
description: クロマティックボタンアコーディオンの実装について
globs: src/button-accordion-with-keyboard/**/*
---
# button-accordion-with-keyboard

クロマティックボタンアコーディオンを演奏できるウェブアプリケーションのルール集

## プロジェクト概要

このプロジェクトは、ウェブブラウザ上でクロマティックボタンアコーディオンを演奏できるアプリケーションです。
コンピュータキーボードを使用して、アコーディオンの右手側（メロディー）と左手側（伴奏）を演奏できます。

## 技術スタック

- React: UIフレームワーク
- Jotai: 状態管理
- Tone.js: オーディオ処理
- TypeScript: 型システム
- MUI: UIコンポーネントライブラリ

## アプリケーション構造

### ディレクトリ構造

- `/atoms`: Jotaiのアトムを管理
  - `/rightHand`: 右手側の状態管理
  - `/leftHand`: 左手側の状態管理
  - `/shared`: 共通の状態管理
- `/audio`: オーディオ処理関連のロジック
  - `/rightHand`: 右手側の音声処理
  - `/leftHand`: 左手側の音声処理
  - `/shared`: 共通の音声処理
- `/components`: Reactコンポーネント
  - `/rightHand`: 右手側のUI
  - `/leftHand`: 左手側のUI
  - `/shared`: 共通のUI
- `/config`: 楽器の構造や音声理論に関する定数など
  - キーボードマッピング
  - リードセット設定
  - オーディオパラメータ
- `/hooks`: カスタムフック

### 主要機能

1. 右手側筐体（メロディー側）
   - Cシステムのクロマティックボタン配列
   - 5つのリードセット（L1, M1, M2, M3, H1）
     - L1: 低音（中音より1オクターブ低い）
     - M1: 中音（M2より僅かに低くデチューン）
     - M2: 中音（基準音）
     - M3: 中音（M2より僅かに高くデチューン）
     - H1: 高音（中音より1オクターブ高い）
   - レジスタースイッチによる音色切り替え

2. 左手側筐体（伴奏側）
   - ストラデラベースシステム（48ベース、12x4）
   - 4種類のリードセット
     - Soprano (C5-B5): コードとベース両方で鳴る
     - Alto (C4-B4): コードとベース両方で鳴る
     - Tenor (C3-B3): ベースでのみ鳴る
     - Bass (C2-B2): ベースでのみ鳴る
   - レジスタースイッチによる音色切り替え

## コンポーネント設計ルール

1. コンポーネントの分離
   - 右手側/左手側で別コンポーネント
   - 音量調整は左右で独立したコンポーネント
   - リードセット制御は左右で独立したコンポーネント

2. コンポーネントの配置
   - 共通コンポーネントは`shared`ディレクトリに配置
   - 機能特有のコンポーネントは対応するディレクトリに配置

## 状態管理ルール

1. アトムの分類と配置
   - 右手側の状態は`rightHand`ディレクトリに配置
   - 左手側の状態は`leftHand`ディレクトリに配置
   - 共通の状態は`shared`ディレクトリに配置

2. オーディオ状態の管理
   - リードセットの状態（有効/無効）
   - ピッチ設定（全体およびリードセット個別）
   - 音量設定（右手/左手個別）
   - レジスタースイッチの状態

## オーディオ処理ルール

1. Tone.jsの利用
   - シンセサイザーの初期化は`AudioInitializer`コンポーネントで行う
   - オーディオ処理は`audio`ディレクトリ内で管理
   - Tone.jsの機能を優先的に使用する

2. オーディオ処理の最適化
   - Tone.jsの提供する機能を最大限活用
   - 複雑な音声処理が必要な場合のみ、Web Audio APIを直接使用
   - 音声処理のパフォーマンスを考慮し、不要な処理を避ける

3. リードセットの音声処理
   - 各リードセットは独立して制御可能
   - デチューン処理はTone.jsのネイティブ機能を使用
   - ピッチ変更はリアルタイムで反映
